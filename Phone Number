class Solution {
   public List<String> letterCombinations(String digits) {
        List<String> res = new ArrayList<>();
        if (digits.length() == 0) return res;
        
        Map<Integer, String> map = new HashMap<>();
        addVals(map);
        
        backtrack(res, digits, map, "", 0);
        
        return res;
    }
    
    private void backtrack(List<String> res, String digits, Map<Integer, String> map, String str, int start) {
        if (str.length() == digits.length()) {
            res.add(new String(str));
        } else {
            int currDigit = Character.getNumericValue(digits.charAt(start));
            for (int i = 0; i < map.get(currDigit).length(); i++) {
                backtrack(res, digits, map, str + map.get(currDigit).charAt(i), start + 1);
            }
        }
    }
    
    private void addVals(Map<Integer, String> map) {
        map.put(2, "abc");
        map.put(3, "def");
        map.put(4, "ghi");
        map.put(5, "jkl");
        map.put(6, "mno");
        map.put(7, "pqrs");
        map.put(8, "tuv");
        map.put(9, "wxyz");
    }
}
